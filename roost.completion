_roost()
{
    local cur script coms opts com
    COMPREPLY=()
    _get_comp_words_by_ref -n : cur words

    # for an alias, get the real script behind it
    if [[ $(type -t ${words[0]}) == "alias" ]]; then
        script=$(alias ${words[0]} | sed -E "s/alias ${words[0]}='(.*)'/\1/")
    else
        script=${words[0]}
    fi

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    # completing for an option
    if [[ ${cur} == --* ]] ; then
        opts="--help --quiet --verbose --version --ansi --no-ansi --no-interaction --env"

        case "$com" in

            help)
            opts="${opts} --format --raw"
            ;;

            list)
            opts="${opts} --raw --format"
            ;;

            config:dump)
            opts="${opts} --table-groups --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            db:backup)
            opts="${opts} --tag --strip --no-progress --print --skip-filter --clean --force --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            db:create)
            opts="${opts} --force --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            db:drop)
            opts="${opts} --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            db:export)
            opts="${opts} --tag --force --strip --no-progress --print --skip-filter --upload --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            db:import)
            opts="${opts} --no-progress --print --skip-filter --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            db:list)
            opts="${opts} --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            dump:clean)
            opts="${opts} --tag --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            dump:delete)
            opts="${opts} --no-progress --force --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            dump:download)
            opts="${opts} --import --remove-file --no-progress --force --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            dump:list)
            opts="${opts} --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            dump:restore)
            opts="${opts} --most-recent --tag --no-progress --force --keep-file --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

            dump:upload)
            opts="${opts} --no-progress --force --magento-directory --project --db-host --db-port --db-name --db-username --db-password --storage --aws-bucket --aws-access-key --aws-secret-key --aws-region"
            ;;

        esac

        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0;
    fi

    # completing for a command
    if [[ $cur == $com ]]; then
        coms="help list config:dump db:backup db:create db:drop db:export db:import db:list dump:clean dump:delete dump:download dump:list dump:restore dump:upload"

        COMPREPLY=($(compgen -W "${coms}" -- ${cur}))
        __ltrim_colon_completions "$cur"

        return 0
    fi
}

complete -o default -F _roost roost
